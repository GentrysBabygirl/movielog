---
---
:ruby
  review = Movielog.reviews[review.sequence]
  content_for(:title, "#{review.display_title} Movie Review")
  aka_titles = MovieDb.aka_titles_for_title(db: Movielog.db, title: review.title, display_title: review.display_title)
  viewings = Movielog.viewings_for_title(title: review.title)
  headline_cast = MovieDb.headline_cast_for_title(db: Movielog.db, title: review.title)
  directors = MovieDb.directors_for_title(db: Movielog.db, title: review.title)
  director_slug = directors.map { |d| "#{d.first_name} #{d.last_name}" }.to_sentence
  title_no_year = review.display_title.reverse.gsub(/^(.*\d{4}[(] )/, '').reverse
  description = review.pull_quote_short || review.pull_quote
  description = description.gsub( "_#{title_no_year}_", "&quot;#{title_no_year}&quot;" )

- content_for(:head) do
  %meta{ name: 'description', content: description_for_review(review: review, aka_titles: aka_titles, headline_cast: headline_cast) }
  %meta{ property: 'og:title', content: "#{review.display_title} Movie Review" }
  %meta{ property: 'og:url', content: "https://www.franksmovielog.com/reviews/#{review.slug}" }
  %meta{ property: 'og:image', content: review.backdrop }
  %meta{ property: 'og:description', content: markdown(description) }
  %meta{ name: 'twitter:card', content: 'summary_large_image' }
  %meta{ name: 'twitter:site', content: '@franksmovielog' }
  %meta{ name: 'twitter:title', content: review.display_title }
  %meta{ name: 'twitter:description', content: markdown(description) }
  %meta{ name: 'twitter:image', content: review.backdrop }


%article.post
  - if review.backdrop
    .post_backdrop{ data: { backdrop: review.backdrop } }

  %h1.post_title= review.display_title

  - if aka_titles.any?
    %dl.review_aka_list
      %dt.review_aka_list-heading aka
      - aka_titles.each do |aka_title|
        %dd.review_aka_list-item= aka_title unless aka_title == review.display_title

  .review_directed_by Directed by #{director_slug}

  = grade_to_image_tag(grade: review.grade, options: { class: 'review_rating' })

  .post_content
    = markdown(review.content)
  %p.post_slug
    = "<span>#{review.display_title}</span> was reviewed on #{review.date.strftime('%b %-d, %Y')}. "
    = "I've seen it "
    %a{ href: "/viewings/?title=#{URI.escape(review.display_title)}", data: { no_instant: true } }
      = "#{pluralize(viewings.length, 'time')}. "
    = "More at the "
    %a{ href: "http://www.imdb.com/title/#{review.imdb_id}" } 
      IMDb
    = "."

- content_for(:footer) do
  = partial(:recent_posts, locals: { current_post: review })
  %script{ type: 'application/ld+json' }
    :plain
      {
        "@context":"http://schema.org",
        "@type":"Review",
        "author":{
          "@type":"Person",
          "name":"Frank Showalter",
          "sameAs":"https://www.frankshowalter.com"
        },
        "datePublished":"#{review.date.iso8601}",
        "description":"#{description}", 
        "inLanguage":"en",
        "itemReviewed":{
          "@type":"Movie",
          "name":"#{review.display_title}",
          "sameAs":"http://www.imdb.com/title/#{review.imdb_id}/"
        },
        "publisher":{
          "@type":"Organization",
          "name":"Frank's Movie Log",
          "sameAs":"http://www.franksmovielog.com"
        },
        "reviewRating":{
          "@type":"Rating",
          "worstRating":0,
          "bestRating":5,
          "ratingValue": #{Movielog::ConvertGradeToNumber.call(grade: review.grade) / 3.0}
        }
      }

